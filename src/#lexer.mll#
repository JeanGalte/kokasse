{
  open Lexing
  open Parser

exception Erreur_lexicale of string

exception Impossible

let kwd =  
    [("fun", FUN);
    ("fn", FN);
    ("if", IF);
    ("elif", ELIF);
    ("then", THEN);
    ("else", ELSE);
    ("val", VAL);
    ("var", VAR);
    ("return", RETURN)]
   

let find_id (s : string) =
  match List.assoc_opt s kwd with
  | Some kw ->  kw
  | None -> IDENT s

let lex_binop b =
  match b with
  | "%" -> MOD
  | "+" -> PLUS
  | "-" -> MOINS
  | "*" -> FOIS
  | "/" -> DIV
  | "&&" -> AND
  | "||" -> OR
  | "<=" -> LT
  | ">=" -> GT
  | ":=" -> DOUBLE_DOT_EGAL
  | "==" -> DOUBLE_EGAL
  | "!=" -> NEQ
  | "=" -> EGAL
  | ";" -> SEMIC
  | "->" -> RIGHTARR
  | "++" -> CONCAT
  | _ -> raise Impossible

let lex_unop b =
   match b with
  | '!' -> NOT
  | '~' -> NINT
  | _ -> raise Impossible

let lex_other_symb s =
  match s with
  | '{' ->  LB
  | '}' ->  RB
  | '(' -> LP
  | ')' -> RP
  | ',' -> COMMA
  | ':' -> DOUBLE_DOT
  | '<' -> LAB
  | '>' -> RAB
  | '[' -> CRG
  | ']' -> CRD
  | '.' -> DOT
  | _ -> raise Impossible

let lex_tf s =
  match s with
  | "True" -> BOOL true
  | "False" -> BOOL false
  | _ -> raise Impossible

}

let space = [' ' '\t']
let bool = "true"|"false"
let digit = ['0'-'9']
let integer = '0' | '-'? ['1'-'9'] digit*
let lower = ['a'-'z'] | '_'
let upper = ['A'-'Z']
let letter = ['a'-'z'] | ['A' - 'Z']
let other = digit | lower | upper
let prect = (letter | digit) '-'
let tf = "True"|"False"

let b = (other | prect+ letter)*(prect+ | '\''*)
                                 
let c = prect*((letter b) ?)

let ident = lower b | prect c
  
let unop = "~"|"!"
let binop = "++"|"+"|"-"|"*"|"%"|"/"|"&&"|"||"|"<="|">="|":="|"!="|"="|"=="|";"|"->"
let other_symb = "{"|"}"|"("|")"|","|":"|"<"|">"|"["|"]"|"."

rule token  = parse
  | eof { EOF }
  | space { token lexbuf }
  | '\n'+ as s
               { 
                 let l = String.length s in
                 for _=1 to l do
                   new_line lexbuf
                 done;
                 RET
               }
  | "//" { single_line_comment lexbuf }
  | "/*" { multi_line_comment lexbuf }
  | integer as i { INT (int_of_string i) }
  | bool as b {let k = if b = "true" then true else false in  BOOL k }
  | unop as u {  (lex_unop u)}
  | binop as b {  (lex_binop b) }
  | other_symb as s { (lex_other_symb s) }
  | '"' {  lex_string (Buffer.create 30) lexbuf }
  | tf as t {lex_tf t}
  | ident as id { find_id id }
  | _ { raise (Erreur_lexicale ("Lexème non reconnu "^Lexing.lexeme lexbuf)) }
and single_line_comment = parse
  | '\n'+ as s
               { 
                 let l = String.length s in
                 for _=1 to l do
                   new_line lexbuf
                 done;
                 token lexbuf
               }
  | eof { EOF }
  | _ {single_line_comment lexbuf }
and  multi_line_comment = parse
  | "*/" { token lexbuf }
  | '\n' { new_line lexbuf; multi_line_comment lexbuf}
  | eof {raise (Erreur_lexicale "Commentaire non fermé")}
  | _ { multi_line_comment lexbuf }
and lex_string buf = parse
  | '"'       { STRING (Buffer.contents buf) }
  | '\\' 'n'  { Buffer.add_char buf '\n'; lex_string buf lexbuf }
  | '\\' 't'  { Buffer.add_char buf '\t'; lex_string buf lexbuf }
  | '\\' '"'  { Buffer.add_char buf '\"'; lex_string buf lexbuf }
  | '\\' '\\' { Buffer.add_char buf '\\'; lex_string buf lexbuf }
  | [^ '"' '\\']+
    { Buffer.add_string buf (Lexing.lexeme lexbuf);
      lex_string buf lexbuf
    }
  | _ { raise (Erreur_lexicale ("Caractère non reconnu : " ^ Lexing.lexeme lexbuf)) }
  | eof { raise
            (Erreur_lexicale ("La chaîne de caractère "^(Buffer.contents buf)^"n'est pas terminée"))
        }

{
  (* Fonctions pour le lexage. *)
  (* Leur rôle (dans cet ordre): *)
  (*   -Appliquer l'algo d'indentation *)
  (*   -Remplacer } par ;} *)

  let indent_stack = Stack.create ()

  let () = Stack.push 0 indent_stack

  let last_tok = ref EOF 

  let push_indent_stack (i : int) : unit = Stack.push i indent_stack
                           
  let pop_indent_stack () =
    Stack.pop indent_stack
  
  let tok_queue : token Queue.t = Queue.create ()

  let push_token (t : token) : unit = last_tok := t; Queue.push t tok_queue
  
  let pop_token () = Queue.pop tok_queue

  let is_beg_cont (t : token) : bool =
    match t with
    | PLUS | MOINS | FOIS | DIV | MOD | CONCAT
      | LT | GT | LAB | RAB | DOUBLE_EGAL | NEQ
      | AND  | OR | THEN | ELSE | ELIF | RP | RB
      | COMMA | RIGHTARR | LB | EGAL | DOT | DOUBLE_DOT_EGAL
      -> true
    | _ -> false
  
  let is_end_cont (t : token) : bool =
    match t with
    | PLUS | MOINS | FOIS | DIV | MOD | CONCAT
      | LT | GT | LAB | RAB | DOUBLE_EGAL | NEQ
      | AND | OR | LP | LB | COMMA
      -> true
    | _ -> false
  
  let emit_tok (t : token) : unit  =   
    (match t with
    | ELIF -> push_token ELSE; push_token IF
    | RB -> push_token SEMIC; push_token RB
    | _ as t' -> push_token t')         
 
  let lex_with_ret (lexfun : lexbuf -> token) (l : lexbuf) (t : token) : unit =
    match t with
    | RET ->
         let next_tok = lexfun l in
         let pos = lexeme_start_p l in
         let col = pos.pos_cnum - pos.pos_bol in
         let m = ref (Stack.top indent_stack) in
         let ucond () = not (is_beg_cont next_tok || is_end_cont !last_tok) in
         let () =
         (if col > !m then
            (if ucond () then emit_tok LB;
            if !last_tok = LB then push_indent_stack col)
         else
           (while col < !m do
              ignore (pop_indent_stack ());
              m := Stack.top indent_stack;
              if next_tok <> RB then emit_tok RB;
           done;
           if col > !m then
             raise (Erreur_lexicale "problème d'indentation")
           else
             if ucond () then emit_tok SEMIC
           )
         ) in 
         emit_tok next_tok
    | EOF ->
       let c = 0 in
       let m = ref (Stack.top indent_stack) in
       while c < !m do
         ignore (pop_indent_stack ());
         m := Stack.top indent_stack;
         emit_tok RB
       done;
       emit_tok EOF        
    | _ as t' -> emit_tok t'

  let next_token (lexfun : lexbuf -> token) : lexbuf -> token =
    fun l ->
    if Queue.is_empty tok_queue then
      (let t = lexfun l in
      lex_with_ret lexfun l t);
    (pop_token ())
  
}
